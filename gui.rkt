#lang racket
;GUI
;Author: Charlie R. Hicks
(require racket/include)
(require "chemistry.rkt")
(require racket/gui/base)
(define main-frame (new frame% [label "Charlie's Chemistry Application"] [width 800] [height 400] [alignment'(left top)] ))
;Button which links to the periodic table frame
(define periodic-table-button (new button% [label "Periodic Table"] [parent main-frame] [callback (lambda (button event)
                                                                      (send periodic-frame show #t)
                                                                      (send main-frame show #f))]))
;Button which links to the determine abundance frame
(define determine-abundances-button (new button% [label "Determine Abundances"] [parent main-frame] [callback (lambda (button event)
                                                                            (send abundance-frame show #t)
                                                                            (send main-frame show #f))]))
(define periodic-frame (new frame% [label "Periodic Table"] [width 800] [height 400] [alignment '(left top)]))
(define periodic-table-back (new button% [label "Back"] [parent periodic-frame] [callback (lambda (button event)
                                                                (send periodic-frame show #f)
                                                                (send main-frame show #t))]))
(define row-1 (new horizontal-pane% [parent periodic-frame]))
(define row-1-left (new horizontal-pane% [parent row-1] [alignment '(left center)]))
(define row-1-right (new horizontal-pane% [parent row-1] [alignment'(right center)]))
(define row-2 (new horizontal-pane% [parent periodic-frame]))
(define row-2-left (new horizontal-pane% [parent row-2] [alignment '(left center)]))
(define row-2-right (new horizontal-pane% [parent row-2] [alignment '(right center)]))
(define row-3 (new horizontal-pane% [parent periodic-frame]))
(define row-3-left (new horizontal-pane% [parent row-3] [alignment '(left center)]))
(define row-3-right (new horizontal-pane% [parent row-3] [alignment '(right center)]))
(define row-4 (new horizontal-pane% [parent periodic-frame]))
(define row-4-left (new horizontal-pane% [parent row-4] [alignment '(left center)]))
(define row-4-right (new horizontal-pane% [parent row-4] [alignment '(right center)]))

(define row-5 (new horizontal-pane% [parent periodic-frame]))
(define row-5-left (new horizontal-pane% [parent row-5] [alignment '(left center)]))
(define row-5-right (new horizontal-pane% [parent row-5] [alignment '(right center)]))

(define row-6 (new horizontal-pane% [parent periodic-frame]))
(define row-7 (new horizontal-pane% [parent periodic-frame]))

(define element-info (new horizontal-pane% [parent periodic-frame]))
(define element-info-name (new text-field% [label "Element Name:"] [parent element-info]))
(define element-info-number (new text-field% [label "Atomic Number:"] [parent element-info]))
(define element-info-symbol (new text-field% [label "Atomic Symbol:"] [parent element-info]))
(define element-info-weight (new text-field% [label "Molecular Weight:"] [parent element-info]))

(define element-search (new horizontal-pane% [parent periodic-frame]))
(define radial-search (new radio-box%
                           (label "Find By:")
                           (parent element-search)
                           (choices (list "Name"
                                          "Mass"
                                          "Symbol"
                                          "Atomic Number"))))
;clears text fields
(define (clear-periodic-text-fields)
  (send element-info-name set-value "")
  (send element-info-symbol set-value "")
  (send element-info-weight set-value "")
  (send element-info-number set-value "")
  )
;This function is to help with the button
(define (set-periodic-text-fields atomic-number)
  (if (not (number? atomic-number))
      (clear-periodic-text-fields)
      (let ([element (list-ref (get-elements) (- atomic-number 1))])
        (send element-info-name set-value (list-ref element 1))
        (send element-info-number set-value (number->string (list-ref element 2)))
        (send element-info-weight set-value (number->string (list-ref element 3)))
        (send element-info-symbol set-value (list-ref element 0)))))
;This will find what the radio button is set to and then fill in the fields accordingly based on one other field.
(define search-periodic (new button% [label "Find"] [parent element-search] [callback (lambda (button event)
                                                                (let ([search-by (send radial-search get-selection)])
                                                                  ;0 is Name
                                                                  (if (equal? search-by 0)
                                                                      (set-periodic-text-fields (atomic-number-by-name (send element-info-name get-value)))
                                                                      (if (equal? search-by 1)
                                                                          ;mass
                                                                          (set-periodic-text-fields (atomic-number-by-mass (string->number (send element-info-weight get-value))))
                                                                          (if (equal? search-by 2)
                                                                          ;symbol
                                                                              (set-periodic-text-fields (atomic-number-by-symbol (send element-info-symbol get-value)))
                                                                              (if (equal? search-by 3)
                                                                                  ;atomic number
                                                                                  (set-periodic-text-fields (string->number (send element-info-number get-value)))
                                                                                  #f))))))]))
                                                                
                                                     
                                                     
(define (make-buttons element-list)
  (for ([element element-list])
    (let ([atom-num (list-ref element 2)] [callbackfunc (lambda (button event)
                                                                          (send element-info-name set-value (list-ref element 1))
                                                                          (send element-info-number set-value (number->string (list-ref element 2)))
                                                                          (send element-info-weight set-value (number->string (list-ref element 3)))
                                                                          (send element-info-symbol set-value (list-ref element 0)))])
      (if (>= atom-num 87)
          (new button% [label (first element)] [parent row-7] [callback callbackfunc] [min-width 35])
          (if (>= atom-num 55)
              (new button% [label (first element)] [parent row-6] [callback callbackfunc] [min-width 35])
              (if (>= atom-num 39)
                  (new button% [label (first element)] [parent row-5-right] [callback callbackfunc] [min-width 35])
                  (if (>= atom-num 37)
                      (new button% [label (first element)] [parent row-5-left] [callback callbackfunc] [min-width 35])
                      (if (>= atom-num 21)
                          (new button% [label (first element)] [parent row-4-right] [callback callbackfunc] [min-width 35])
                          (if (>= atom-num 19)
                              (new button% [label (first element)] [parent row-4-left] [callback callbackfunc] [min-width 35])
                              (if (>= atom-num 13)
                                  (new button% [label (first element)] [parent row-3-right] [callback callbackfunc] [min-width 35])
                                  (if (>= atom-num 11)
                                      (new button% [label (first element)] [parent row-3-left] [callback callbackfunc] [min-width 35])
                                      (if (>= atom-num 5)
                                          (new button% [label (first element)] [parent row-2-right] [callback callbackfunc] [min-width 35])
                                          (if (>= atom-num 3)
                                              (new button% [label (first element)] [parent row-2-left] [callback callbackfunc] [min-width 35])
                                              (if (> atom-num 1)
                                                  (new button% [label (first element)] [parent row-1-right] [callback callbackfunc] [min-width 35])
                                                  (new button% [label (first element)] [parent row-1-left] [callback callbackfunc] [min-width 35])))))))))))))))
(make-buttons (get-elements))
;Abundance Frame
(define abundance-frame (new frame% [label "Determine Abundance"] [width 800] [height 400] [alignment '(left center)]))

(define abundance-back (new button% [label "Back"] [parent abundance-frame] [callback (lambda (button event)
                                                                                        (send abundance-frame show #f)
                                                                                        (send main-frame show #t))]))
(define abundance-fields (new vertical-pane% [parent abundance-frame] [alignment '(center top)]))
(define abundance-message (new message% (parent abundance-fields) (label "") (auto-resize #t)))
(define abundance-inputs (new horizontal-pane% [parent abundance-fields] [alignment '(center center)]))
(define abundance-mass1 (new text-field% [label "Mass #1:"] [parent abundance-inputs]))
(define abundance-mass2 (new text-field% [label "Mass #2:"] [parent abundance-inputs]))
(define abundance-wam (new text-field% [label "Weighted Average Mass:"] [parent abundance-inputs]))
(define abundance-outputs (new horizontal-pane% [parent abundance-fields] [alignment '(center center)]))
(define abundance-percentage1 (new text-field% [label "Precentage of #1"] [parent abundance-outputs]))
(define abundance-percentage2 (new text-field% [label "Precentage of #2"] [parent abundance-outputs]))
(define abundance-calculate (new button% [label "Calculate"] [parent abundance-outputs] [callback (lambda (button event)
                                                                                                    (if (and (string->number (send abundance-mass1 get-value)) (string->number (send abundance-mass2 get-value)) (string->number (send abundance-wam get-value)))                  
                                                                                                    (let ([answers (determine-abundances (string->number (send abundance-mass1 get-value)) (string->number (send abundance-mass2 get-value)) (string->number (send abundance-wam get-value)))])
                                                                                                      (send abundance-percentage1 set-value (number->string (last (first answers))))
                                                                                                      (send abundance-percentage2 set-value (number->string (last (last answers))))
                                                                                                      (send abundance-message set-label "Percentages Displayed Below")
                                                                                                      )
                                                                                                    (send abundance-message set-label "Invalid Data Entered - Expected Numbers")
                                                                                                    )
                                                                                                    )]))
;Activate Frame
(send main-frame show #t)